      // gap lengths don't matter

  //     if ((options.lineLength as number[])[thisIndex] % 2) { // lineLength is odd
  //       if (len % 2) {  // length of the longest subject is odd
  //         if (subject[1].length % 2) // odd --
  //           options.subjects[thisIndex] = " ".padEnd(Math.floor(diff / 2), ' ') + subject[1].padEnd(Math.floor(diff / 2 + subject[1].length), ' ');
  //         else // even
  //           options.subjects[thisIndex] = " ".padEnd(Math.floor(diff / 2), ' ') + subject[1].padEnd(Math.floor(diff / 2 + subject[1].length), ' ');
  //       }
  //       else {  // length of the longest subject is even
  //         if (subject[1].length % 2) // odd
  //           options.subjects[thisIndex] = " ".padEnd(Math.ceil(diff / 2), ' ') + subject[1].padEnd(Math.ceil(diff / 2 + subject[1].length), ' ');
  //         else // even
  //           options.subjects[thisIndex] = " ".padEnd(Math.floor(diff / 2), ' ') + subject[1].padEnd(Math.floor(diff / 2 + subject[1].length), ' ');
  //       }
  //     }
  //     else { //  lineLength is even
  //       if (subject[1].length % 2) // odd
  //         options.subjects[thisIndex] = " ".padEnd(Math.floor(diff / 2), ' ') + subject[1].padEnd(Math.floor(diff / 2 + subject[1].length), ' ');
  //       else // even
  //         options.subjects[thisIndex] = " ".padEnd(Math.ceil(diff / 2), ' ') + subject[1].padEnd(Math.ceil(diff / 2 + subject[1].length), ' ');
  //     }
  //   }
  // }
  
  
    // use below if want the line lengths to match when there is a tabStop(s) or not
    // if subject is a tabstop, increase subject length by 2 for each $1, $2, etc.
    // const capGroupOnlyRE = /(?<capGroupOnly>(?<!\$)\$\{(\d)\}|(?<!\$)\$(\d))/g;
    // const capGroups = subject.match(capGroupOnlyRE);
    // if (capGroups) {
    //   padLeftLength += capGroups.length;
    //   padRightLength  += capGroups.length;
    // }
    
    
    // if (justify === 'center' || justify === '') {
    //   // to put the extra filler (if length is not an integer) before the gap, using ceil and floor      
    //   padLeftLength = Math.ceil(lineLength / 2 - subjectLength / 2 - gapLeft - startText.length);
    //   padRightLength = Math.floor(lineLength / 2 - subjectLength / 2 - gapRight - endText.length);
    // }

    C:\Users\markm\AppData\Roaming\Code\User\keybindings.json - Stable
    C:\Users\markm\AppData\Roaming\Code - Insiders\User\keybindings.json - Insiders

    APPDATA=C:\Users\markm\AppData\Roaming
    
    
    Windows %APPDATA%\Code\User\settings.json
    macOS $HOME/Library/Application\ Support/Code/User/settings.json
    Linux $HOME/.config/Code/User/settings.json

    fm = fm.replace(/%APP_SETTINGS_HOME%/, '/User');
